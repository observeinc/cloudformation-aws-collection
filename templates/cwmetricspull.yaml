AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Required parameters
        Parameters:
          - ObserveCustomer
          - ObserveToken
      - Label:
          default: Observe Lambda Configuration
        Parameters:
          - LambdaVersion
          - LambdaReservedConcurrentExecutions
          - LambdaTimeout
          - LambdaMemorySize
      - Label:
          default: EventBridge Configuration
        Parameters:
          - EventBridgeMetricsSchedule
          - EventBridgeMetricsPayload
 
Parameters:
  ObserveCustomer:
    Type: String
    Description: Observe Customer ID
    AllowedPattern: '\d+'
    ConstraintDescription: 'Customer ID can only contain digits'
  ObserveToken:
    Type: String
    NoEcho: true
    Description: Observe Ingest Token
    AllowedPattern: '\S+'
    ConstraintDescription: 'Token cannot contain spaces'
  ObserveDomain:
    Type: String
    Default: observeinc.com
    Description: Observe domain to submit data to
  LogGroupExpirationInDays:
    Type: Number
    Default: 365
    AllowedValues:
      - 1
      - 3
      - 7
      - 14
      - 30
      - 90
      - 365
    Description: |
      Expiration to set on log groups
  EventBridgeMetricsSchedule:
    Type: String
    Default: "cron(*/10 * * * ? *)"
    Description: Schedule on which to trigger Lambda to pull CloudWatch Metrics
  EventBridgeMetricsPayload:
    Type: String
    Default: "{\"period\":60,\"interval\":600,\"delay\":300,\"filters\":[{\"namespace\":\"AWS/RDS\"}]}"
    Description: Metrics to scrape
  LambdaVersion:
    Type: String
    Default: latest
    Description: Observe lambda function version
  LambdaReservedConcurrentExecutions:
    Type: Number
    Default: 100
    Description: The number of simultaneous executions to reserve for the function. Set to -1 to not reserve concurrent executions.
  LambdaTimeout:
    Type: Number
    Default: 60
    Description: >-
      The amount of time that Lambda allows a function to run before stopping
      it. The maximum allowed value is 900 seconds.
  LambdaMemorySize:
    Type: Number
    Default: 128
    MinValue: 128
    MaxValue: 10240
    Description: >-
      The amount of memory that your function has access to. The value must be a
      multiple of 64 MB.
Conditions:
  HasReservedConcurrency: !Not
    - !Equals
      - Ref: LambdaReservedConcurrentExecutions
      - -1
Mappings:
  RegionMap:
    ca-central-1: { BucketName: 'observeinc-ca-central-1' }
    ap-northeast-1: { BucketName: 'observeinc-ap-northeast-1' }
    ap-northeast-2: { BucketName: 'observeinc-ap-northeast-2' }
    ap-northeast-3: { BucketName: 'observeinc-ap-northeast-3' }
    ap-south-1: { BucketName: 'observeinc-ap-south-1' }
    ap-southeast-1: { BucketName: 'observeinc-ap-southeast-1' }
    ap-southeast-2: { BucketName: 'observeinc-ap-southeast-2' }
    eu-central-1: { BucketName: 'observeinc-eu-central-1' }
    eu-north-1: { BucketName: 'observeinc-eu-north-1' }
    eu-west-1: { BucketName: 'observeinc-eu-west-1' }
    eu-west-2: { BucketName: 'observeinc-eu-west-2' }
    eu-west-3: { BucketName: 'observeinc-eu-west-3' }
    sa-east-1: { BucketName: 'observeinc-sa-east-1' }
    us-east-1: { BucketName: 'observeinc-us-east-1' }
    us-east-2: { BucketName: 'observeinc-us-east-2' }
    us-west-1: { BucketName: 'observeinc-us-west-1' }
    us-west-2: { BucketName: 'observeinc-us-west-2' }
Resources:
  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref 'AWS::StackName'
      RetentionInDays: !Ref LogGroupExpirationInDays
  Lambda:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - LambdaLogGroup
    Properties:
      FunctionName: !Ref 'AWS::StackName'
      Handler: bootstrap
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          OBSERVE_URL: !Sub 'https://${ObserveCustomer}.collect.${ObserveDomain}/v1/http'
          OBSERVE_TOKEN: !Sub '${ObserveToken}'
      Code:
        S3Bucket: !FindInMap
          - RegionMap
          - !Ref 'AWS::Region'
          - BucketName
        S3Key: !Sub 'lambda/observer/arm64/${LambdaVersion}.zip'
      Runtime: provided.al2
      MemorySize: !Ref LambdaMemorySize
      Timeout: !Ref LambdaTimeout
      ReservedConcurrentExecutions: !If
       - HasReservedConcurrency
       - !Ref LambdaReservedConcurrentExecutions
       - !Ref 'AWS::NoValue'
      Architectures: 
        - arm64
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole'
      Policies:
        - PolicyName: CloudwatchMetricsPull
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:ListMetrics'
                  - 'cloudwatch:GetMetricData'
                Resource:
                  - '*'
  EventBridgeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  EventBridgePeriodicMetrics:
    Type: 'AWS::Events::Rule'
    DependsOn:
      - LambdaEventBridgePermission
    Properties:
      Name: !Sub '${AWS::StackName}Metrics'
      ScheduleExpression: !Ref EventBridgeMetricsSchedule
      Targets:
        - Id: ObserveLambda
          Arn: !GetAtt Lambda.Arn
          Input: !Sub '{ "metrics": ${EventBridgeMetricsPayload} }'
  LambdaEventBridgePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref Lambda
      Principal: events.amazonaws.com
      SourceArn: !Sub >-
        arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${AWS::StackName}Metrics
 
Outputs:
  LambdaName:
    Description: 'Lambda Name'
    Value: !Ref 'Lambda'
    Export:
      Name: !Sub '${AWS::StackName}:lambda:name'
  LambdaArn:
    Description: 'Lambda ARN'
    Value: !GetAtt 'Lambda.Arn'
    Export:
      Name: !Sub '${AWS::StackName}:lambda:arn'
