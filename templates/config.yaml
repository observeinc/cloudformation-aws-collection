AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Required parameters'
      Parameters:
      - ObserveCustomer
      - ObserveToken
    - Label:
        default: 'Optional configuration parameters'
      Parameters:
      - ObserveDomain
      - ExpirationInDays
      - DeliveryFrequency
Parameters:
  ObserveCustomer:
    Type: String
    Description: Observe Customer ID
    AllowedPattern: '\d+'
    ConstraintDescription: 'Customer ID can only contain digits'
  ObserveToken:
    Type: String
    NoEcho: true
    Description: Observe Ingest Token
    AllowedPattern: '\S+'
    ConstraintDescription: 'Token cannot contain spaces'
  ObserveDomain:
    Type: String
    Default: observeinc.com
    Description: Observe domain to submit data to
  ExpirationInDays:
    Description: 'Remove objects from bucket after days (set to 0 to disable).'
    Type: Number
    Default: 3
    AllowedValues:
    - 0
    - 1
    - 3
    - 7
    - 14
    - 30
  DeliveryFrequency:
    Description: 'The frequency with which AWS Config delivers configuration snapshots.'
    Type: String
    Default: Three_Hours
    AllowedValues:
    - One_Hour
    - Three_Hours
    - Six_Hours
    - Twelve_Hours
    - TwentyFour_Hours
Conditions:
  HasExpirationInDays: !Not [!Equals [!Ref ExpirationInDays, 0]]
Resources:
  lambda:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ObserveCustomer: !Ref ObserveCustomer
        ObserveToken: !Ref ObserveToken
        ObserveDomain: !Ref ObserveDomain
        Version: 'latest'
      TemplateURL: https://observeinc.s3-us-west-2.amazonaws.com/cloudformation/lambda.yaml
  Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      LifecycleConfiguration:
        Rules:
        - ExpirationInDays: !If [HasExpirationInDays, !Ref ExpirationInDays, 1]
          Status: !If [HasExpirationInDays, Enabled, Disabled]
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:*'
          Function: !GetAtt 'lambda.Outputs.LambdaArn'
  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'config.amazonaws.com'
          Action: 's3:GetBucketAcl'
          Resource: !GetAtt 'Bucket.Arn'
        - Effect: Allow
          Principal:
            Service: 'config.amazonaws.com'
          Action: 's3:PutObject'
          Resource: !Sub '${Bucket.Arn}/*AWSLogs/${AWS::AccountId}/*'
          Condition:
            StringEquals:
              's3:x-amz-acl': 'bucket-owner-full-control'
        - Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:GetBucketAcl'
          Resource: !GetAtt 'Bucket.Arn'
        - Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:PutObject'
          Resource: !Sub '${Bucket.Arn}/*AWSLogs/${AWS::AccountId}/*'
          Condition:
            StringEquals:
              's3:x-amz-acl': 'bucket-owner-full-control'
  ConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    Properties:
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: !Ref DeliveryFrequency
      S3BucketName: !Ref Bucket
  ConfigurationRecorderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - config.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSConfigRole
  ConfigurationRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
      RoleARN: !GetAtt ConfigurationRecorderRole.Arn
  ConfigSnapshot:
    Type: "Custom::ConfigSnapshot"
    DependsOn: ConfigurationRecorder   # need to ensure this is running first
    Properties:
      ServiceToken: !GetAtt 'lambda.Outputs.LambdaArn'
      DeliveryChannelName: !Ref ConfigDeliveryChannel
Outputs:
  BucketName:
    Description: 'Name of the bucket'
    Value: !Ref Bucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'
  BucketDomainName:
    Description: 'Domain name of the bucket.'
    Value: !GetAtt 'Bucket.DomainName'
    Export:
      Name: !Sub '${AWS::StackName}-BucketDomainName'
